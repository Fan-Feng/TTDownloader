//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TTClient2.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference1.DataService")]
    public interface DataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UserLogin", ReplyAction="urn:DataService/UserLoginResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] UserLogin(string pUName, string pUPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UserLogin", ReplyAction="urn:DataService/UserLoginResponse")]
        System.Threading.Tasks.Task<object[][]> UserLoginAsync(string pUName, string pUPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetBuildInfo", ReplyAction="urn:DataService/GetBuildInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetBuildInfo(string buildID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetBuildInfo", ReplyAction="urn:DataService/GetBuildInfoResponse")]
        System.Threading.Tasks.Task<object[][]> GetBuildInfoAsync(string buildID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetEquipmentInfo", ReplyAction="urn:DataService/GetEquipmentInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetEquipmentInfo(string buildID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetEquipmentInfo", ReplyAction="urn:DataService/GetEquipmentInfoResponse")]
        System.Threading.Tasks.Task<object[][]> GetEquipmentInfoAsync(string buildID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeatherHistory", ReplyAction="urn:DataService/GetWeatherHistoryResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetWeatherHistory(string WeatherStationID, System.DateTime SDate, System.DateTime EDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeatherHistory", ReplyAction="urn:DataService/GetWeatherHistoryResponse")]
        System.Threading.Tasks.Task<object[][]> GetWeatherHistoryAsync(string WeatherStationID, System.DateTime SDate, System.DateTime EDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeatherStationInfo", ReplyAction="urn:DataService/GetWeatherStationInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetWeatherStationInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeatherStationInfo", ReplyAction="urn:DataService/GetWeatherStationInfoResponse")]
        System.Threading.Tasks.Task<object[][]> GetWeatherStationInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeatherAVG", ReplyAction="urn:DataService/GetWeatherAVGResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetWeatherAVG(System.DateTime SDate, System.DateTime EDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeatherAVG", ReplyAction="urn:DataService/GetWeatherAVGResponse")]
        System.Threading.Tasks.Task<object[][]> GetWeatherAVGAsync(System.DateTime SDate, System.DateTime EDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSubItems", ReplyAction="urn:DataService/GetSubItemsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetSubItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSubItems", ReplyAction="urn:DataService/GetSubItemsResponse")]
        System.Threading.Tasks.Task<object[][]> GetSubItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSelectedSubEnergy", ReplyAction="urn:DataService/GetSelectedSubEnergyResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetSelectedSubEnergy(string QueryBuildingID, System.DateTime SDate, System.DateTime EDate, string QuerySubItemID, int iPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSelectedSubEnergy", ReplyAction="urn:DataService/GetSelectedSubEnergyResponse")]
        System.Threading.Tasks.Task<object[][]> GetSelectedSubEnergyAsync(string QueryBuildingID, System.DateTime SDate, System.DateTime EDate, string QuerySubItemID, int iPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCircuitInfoData", ReplyAction="urn:DataService/GetCircuitInfoDataResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetCircuitInfoData(string QueryBuildingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCircuitInfoData", ReplyAction="urn:DataService/GetCircuitInfoDataResponse")]
        System.Threading.Tasks.Task<object[][]> GetCircuitInfoDataAsync(string QueryBuildingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCircuitEnergyData", ReplyAction="urn:DataService/GetCircuitEnergyDataResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetCircuitEnergyData(string QueryBuildingID, string QueryCircuitID, System.DateTime StartTime, System.DateTime EndTime, int TimeSpan);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCircuitEnergyData", ReplyAction="urn:DataService/GetCircuitEnergyDataResponse")]
        System.Threading.Tasks.Task<object[][]> GetCircuitEnergyDataAsync(string QueryBuildingID, string QueryCircuitID, System.DateTime StartTime, System.DateTime EndTime, int TimeSpan);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetMeterInfo", ReplyAction="urn:DataService/GetMeterInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetMeterInfo(string QueryBuildingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetMeterInfo", ReplyAction="urn:DataService/GetMeterInfoResponse")]
        System.Threading.Tasks.Task<object[][]> GetMeterInfoAsync(string QueryBuildingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetMeterData", ReplyAction="urn:DataService/GetMeterDataResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[][] GetMeterData(string QueryBuildingID, System.DateTime StartTime, System.DateTime EndTime, int TimeSpan, string pMeter);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetMeterData", ReplyAction="urn:DataService/GetMeterDataResponse")]
        System.Threading.Tasks.Task<object[][]> GetMeterDataAsync(string QueryBuildingID, System.DateTime StartTime, System.DateTime EndTime, int TimeSpan, string pMeter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DataServiceChannel : TTClient2.ServiceReference1.DataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<TTClient2.ServiceReference1.DataService>, TTClient2.ServiceReference1.DataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public object[][] UserLogin(string pUName, string pUPwd) {
            return base.Channel.UserLogin(pUName, pUPwd);
        }
        
        public System.Threading.Tasks.Task<object[][]> UserLoginAsync(string pUName, string pUPwd) {
            return base.Channel.UserLoginAsync(pUName, pUPwd);
        }
        
        public object[][] GetBuildInfo(string buildID) {
            return base.Channel.GetBuildInfo(buildID);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetBuildInfoAsync(string buildID) {
            return base.Channel.GetBuildInfoAsync(buildID);
        }
        
        public object[][] GetEquipmentInfo(string buildID) {
            return base.Channel.GetEquipmentInfo(buildID);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetEquipmentInfoAsync(string buildID) {
            return base.Channel.GetEquipmentInfoAsync(buildID);
        }
        
        public object[][] GetWeatherHistory(string WeatherStationID, System.DateTime SDate, System.DateTime EDate) {
            return base.Channel.GetWeatherHistory(WeatherStationID, SDate, EDate);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetWeatherHistoryAsync(string WeatherStationID, System.DateTime SDate, System.DateTime EDate) {
            return base.Channel.GetWeatherHistoryAsync(WeatherStationID, SDate, EDate);
        }
        
        public object[][] GetWeatherStationInfo() {
            return base.Channel.GetWeatherStationInfo();
        }
        
        public System.Threading.Tasks.Task<object[][]> GetWeatherStationInfoAsync() {
            return base.Channel.GetWeatherStationInfoAsync();
        }
        
        public object[][] GetWeatherAVG(System.DateTime SDate, System.DateTime EDate) {
            return base.Channel.GetWeatherAVG(SDate, EDate);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetWeatherAVGAsync(System.DateTime SDate, System.DateTime EDate) {
            return base.Channel.GetWeatherAVGAsync(SDate, EDate);
        }
        
        public object[][] GetSubItems() {
            return base.Channel.GetSubItems();
        }
        
        public System.Threading.Tasks.Task<object[][]> GetSubItemsAsync() {
            return base.Channel.GetSubItemsAsync();
        }
        
        public object[][] GetSelectedSubEnergy(string QueryBuildingID, System.DateTime SDate, System.DateTime EDate, string QuerySubItemID, int iPeriod) {
            return base.Channel.GetSelectedSubEnergy(QueryBuildingID, SDate, EDate, QuerySubItemID, iPeriod);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetSelectedSubEnergyAsync(string QueryBuildingID, System.DateTime SDate, System.DateTime EDate, string QuerySubItemID, int iPeriod) {
            return base.Channel.GetSelectedSubEnergyAsync(QueryBuildingID, SDate, EDate, QuerySubItemID, iPeriod);
        }
        
        public object[][] GetCircuitInfoData(string QueryBuildingID) {
            return base.Channel.GetCircuitInfoData(QueryBuildingID);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetCircuitInfoDataAsync(string QueryBuildingID) {
            return base.Channel.GetCircuitInfoDataAsync(QueryBuildingID);
        }
        
        public object[][] GetCircuitEnergyData(string QueryBuildingID, string QueryCircuitID, System.DateTime StartTime, System.DateTime EndTime, int TimeSpan) {
            return base.Channel.GetCircuitEnergyData(QueryBuildingID, QueryCircuitID, StartTime, EndTime, TimeSpan);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetCircuitEnergyDataAsync(string QueryBuildingID, string QueryCircuitID, System.DateTime StartTime, System.DateTime EndTime, int TimeSpan) {
            return base.Channel.GetCircuitEnergyDataAsync(QueryBuildingID, QueryCircuitID, StartTime, EndTime, TimeSpan);
        }
        
        public object[][] GetMeterInfo(string QueryBuildingID) {
            return base.Channel.GetMeterInfo(QueryBuildingID);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetMeterInfoAsync(string QueryBuildingID) {
            return base.Channel.GetMeterInfoAsync(QueryBuildingID);
        }
        
        public object[][] GetMeterData(string QueryBuildingID, System.DateTime StartTime, System.DateTime EndTime, int TimeSpan, string pMeter) {
            return base.Channel.GetMeterData(QueryBuildingID, StartTime, EndTime, TimeSpan, pMeter);
        }
        
        public System.Threading.Tasks.Task<object[][]> GetMeterDataAsync(string QueryBuildingID, System.DateTime StartTime, System.DateTime EndTime, int TimeSpan, string pMeter) {
            return base.Channel.GetMeterDataAsync(QueryBuildingID, StartTime, EndTime, TimeSpan, pMeter);
        }
    }
}
